CREATE DATABASE PRODUCTION;
USE PRODUCTION;

CREATE TABLE USERS (
	UID VARCHAR(36),
	EMAIL VARCHAR(255) NOT NULL,
	VERIFIED BOOLEAN DEFAULT FALSE,
	PASSWORD VARCHAR(255) NOT NULL,
	NAME VARCHAR(255),
	ROLE VARCHAR(255),
	REGISTERED DATETIME,
	LAST_LOGIN DATETIME,
	PRIMARY KEY (UID),
	UNIQUE KEY (EMAIL)
);

CREATE EVENT IF NOT EXISTS CLEAR_UNVERIFIED_ACCOUNTS
ON SCHEDULE EVERY 7 HOUR
DO
   DELETE FROM USERS
   WHERE VERIFIED='0' AND TIMESTAMPDIFF(HOUR, REGISTERED, NOW()) > 7;

CREATE TABLE EMAIL_VERIFY (
	VERIFICATION_HASH VARCHAR(128) UNIQUE,
	UID VARCHAR(36),
	CREATED TIMESTAMP,
	PRIMARY KEY (UID),
	FOREIGN KEY (UID) REFERENCES USERS(UID)
);

SET GLOBAL event_scheduler = ON;

CREATE EVENT IF NOT EXISTS CLEAR_VERIFICATIONS
ON SCHEDULE EVERY 1 HOUR
DO
   DELETE FROM EMAIL_VERIFY
   WHERE TIMESTAMPDIFF(HOUR, CREATED, NOW()) > 7;

CREATE TABLE PASSWORD_RESET (
	HASH VARCHAR(128) UNIQUE,
	UID VARCHAR(36),
	CREATED TIMESTAMP,
	PRIMARY KEY (UID),
	FOREIGN KEY (UID) REFERENCES USERS(UID)
);

CREATE EVENT IF NOT EXISTS CLEAR_PASSWORD_RESETS
ON SCHEDULE EVERY 1 HOUR
DO
   DELETE FROM PASSWORD_RESET
   WHERE TIMESTAMPDIFF(HOUR, CREATED, NOW()) > 7;

CREATE TABLE SUBSCRIPTIONS (
	SID VARCHAR(36),
	UID VARCHAR(36),
	COUNTY VARCHAR(50),
	TYPE VARCHAR(50),
	LAST_VIEW DATETIME,
	LAST_UPDATE DATETIME,
	CREATED DATETIME,
	PRIMARY KEY (SID),
	FOREIGN KEY (UID) REFERENCES USERS(UID)
);

CREATE TABLE FILE_REQUEST_HISTORY (
    FILE_ID VARCHAR(36),
    USER_ID VARCHAR(36),
    REQUEST_DATE DATE,
    RECORD_COUNT BIGINT,
    DATA_TYPE VARCHAR(50),
    PARAMETERS VARCHAR(255),
    PRIMARY KEY (FILE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(UID)
);

CREATE TABLE ORDERS (
	ORDER_ID VARCHAR(66),
	FILE_ID VARCHAR(36),
	USER_ID VARCHAR(36),
	ORDER_DATE DATE,
	PRICE DOUBLE,
	PRIMARY KEY(ORDER_ID, FILE_ID),
	FOREIGN KEY (FILE_ID) REFERENCES FILE_REQUEST_HISTORY(FILE_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(UID)
);

CREATE TABLE QUESTIONS (
	job VARCHAR(555),
	industry VARCHAR(555),
	change_feature VARCHAR(5000),
	add_feature VARCHAR(5000),
	other_comments VARCHAR(5000),
	email VARCHAR(255)
);

COMMIT;
